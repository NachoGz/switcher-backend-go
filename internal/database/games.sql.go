// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: games.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createGame = `-- name: CreateGame :one
INSERT INTO games (id, name, max_players, min_players, is_private, password)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, name, max_players, min_players, is_private, password, created_at, updated_at
`

type CreateGameParams struct {
	ID         uuid.UUID
	Name       string
	MaxPlayers int32
	MinPlayers int32
	IsPrivate  bool
	Password   sql.NullString
}

func (q *Queries) CreateGame(ctx context.Context, arg CreateGameParams) (Game, error) {
	row := q.db.QueryRowContext(ctx, createGame,
		arg.ID,
		arg.Name,
		arg.MaxPlayers,
		arg.MinPlayers,
		arg.IsPrivate,
		arg.Password,
	)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MaxPlayers,
		&i.MinPlayers,
		&i.IsPrivate,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAvailableGames = `-- name: GetAvailableGames :many
SELECT games.id, games.name, games.max_players, games.min_players, games.is_private, games.password, games.created_at, games.updated_at
FROM games
JOIN game_state ON games.id = game_state.game_id
WHERE game_state.state = 'waiting'
`

func (q *Queries) GetAvailableGames(ctx context.Context) ([]Game, error) {
	rows, err := q.db.QueryContext(ctx, getAvailableGames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Game
	for rows.Next() {
		var i Game
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.MaxPlayers,
			&i.MinPlayers,
			&i.IsPrivate,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getGameById = `-- name: GetGameById :one
SELECT id, name, max_players, min_players, is_private, password, created_at, updated_at
FROM games
WHERE id = $1
`

func (q *Queries) GetGameById(ctx context.Context, id uuid.UUID) (Game, error) {
	row := q.db.QueryRowContext(ctx, getGameById, id)
	var i Game
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.MaxPlayers,
		&i.MinPlayers,
		&i.IsPrivate,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
