// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: board.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const addBoxToBoard = `-- name: AddBoxToBoard :one
INSERT INTO
	boxes (id, color, pos_x, pos_y, game_id, board_id, highlight)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, color, pos_x, pos_y, game_id, board_id, highlight, figure_id, figure_type
`

type AddBoxToBoardParams struct {
	ID        uuid.UUID
	Color     string
	PosX      int32
	PosY      int32
	GameID    uuid.UUID
	BoardID   uuid.UUID
	Highlight bool
}

func (q *Queries) AddBoxToBoard(ctx context.Context, arg AddBoxToBoardParams) (Box, error) {
	row := q.db.QueryRowContext(ctx, addBoxToBoard,
		arg.ID,
		arg.Color,
		arg.PosX,
		arg.PosY,
		arg.GameID,
		arg.BoardID,
		arg.Highlight,
	)
	var i Box
	err := row.Scan(
		&i.ID,
		&i.Color,
		&i.PosX,
		&i.PosY,
		&i.GameID,
		&i.BoardID,
		&i.Highlight,
		&i.FigureID,
		&i.FigureType,
	)
	return i, err
}

const createBoard = `-- name: CreateBoard :one
INSERT INTO
	boards (id, game_id)
VALUES ($1, $2)
RETURNING id, game_id, created_at, updated_at
`

type CreateBoardParams struct {
	ID     uuid.UUID
	GameID uuid.UUID
}

func (q *Queries) CreateBoard(ctx context.Context, arg CreateBoardParams) (Board, error) {
	row := q.db.QueryRowContext(ctx, createBoard, arg.ID, arg.GameID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBoard = `-- name: GetBoard :one
SELECT id, game_id, created_at, updated_at
FROM boards
WHERE game_id=$1
`

func (q *Queries) GetBoard(ctx context.Context, gameID uuid.UUID) (Board, error) {
	row := q.db.QueryRowContext(ctx, getBoard, gameID)
	var i Board
	err := row.Scan(
		&i.ID,
		&i.GameID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
