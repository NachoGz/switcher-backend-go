// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: partial_movements.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createPartialMovement = `-- name: CreatePartialMovement :one
INSERT INTO
	partial_movements (id, pos_from_x, pos_from_y, pos_to_x, pos_to_y, game_id, player_id, movement_card_id)
VALUES
	($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, pos_from_x, pos_from_y, pos_to_x, pos_to_y, game_id, player_id, movement_card_id, created_at, updated_at
`

type CreatePartialMovementParams struct {
	ID             uuid.UUID
	PosFromX       int32
	PosFromY       int32
	PosToX         int32
	PosToY         int32
	GameID         uuid.UUID
	PlayerID       uuid.UUID
	MovementCardID uuid.UUID
}

func (q *Queries) CreatePartialMovement(ctx context.Context, arg CreatePartialMovementParams) (PartialMovement, error) {
	row := q.db.QueryRowContext(ctx, createPartialMovement,
		arg.ID,
		arg.PosFromX,
		arg.PosFromY,
		arg.PosToX,
		arg.PosToY,
		arg.GameID,
		arg.PlayerID,
		arg.MovementCardID,
	)
	var i PartialMovement
	err := row.Scan(
		&i.ID,
		&i.PosFromX,
		&i.PosFromY,
		&i.PosToX,
		&i.PosToY,
		&i.GameID,
		&i.PlayerID,
		&i.MovementCardID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllPartialMovementsByPlayer = `-- name: DeleteAllPartialMovementsByPlayer :exec
DELETE FROM partial_movements
WHERE player_id = $1
`

func (q *Queries) DeleteAllPartialMovementsByPlayer(ctx context.Context, playerID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteAllPartialMovementsByPlayer, playerID)
	return err
}

const getPartialMovementsByPlayer = `-- name: GetPartialMovementsByPlayer :many
SELECT id, pos_from_x, pos_from_y, pos_to_x, pos_to_y, game_id, player_id, movement_card_id, created_at, updated_at 
FROM partial_movements
WHERE game_id = $1 AND player_id = $2
`

type GetPartialMovementsByPlayerParams struct {
	GameID   uuid.UUID
	PlayerID uuid.UUID
}

func (q *Queries) GetPartialMovementsByPlayer(ctx context.Context, arg GetPartialMovementsByPlayerParams) ([]PartialMovement, error) {
	rows, err := q.db.QueryContext(ctx, getPartialMovementsByPlayer, arg.GameID, arg.PlayerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PartialMovement
	for rows.Next() {
		var i PartialMovement
		if err := rows.Scan(
			&i.ID,
			&i.PosFromX,
			&i.PosFromY,
			&i.PosToX,
			&i.PosToY,
			&i.GameID,
			&i.PlayerID,
			&i.MovementCardID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const undoMovement = `-- name: UndoMovement :exec
WITH last_movement AS (
	SELECT id FROM partial_movements pm
	WHERE pm.game_id = $1 AND pm.player_id = $2
	ORDER BY id DESC
	LIMIT 1
)
DELETE FROM partial_movements
WHERE id in (SELECT id from last_movement)
`

type UndoMovementParams struct {
	GameID   uuid.UUID
	PlayerID uuid.UUID
}

func (q *Queries) UndoMovement(ctx context.Context, arg UndoMovementParams) error {
	_, err := q.db.ExecContext(ctx, undoMovement, arg.GameID, arg.PlayerID)
	return err
}

const undoMovementByID = `-- name: UndoMovementByID :exec
DELETE FROM partial_movements
WHERE id = $1
`

func (q *Queries) UndoMovementByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, undoMovementByID, id)
	return err
}
