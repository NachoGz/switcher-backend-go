// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: movement_cards.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const assignMovementCard = `-- name: AssignMovementCard :exec
UPDATE movement_cards
SET player_id = $2
WHERE id=$1
`

type AssignMovementCardParams struct {
	ID       uuid.UUID
	PlayerID uuid.NullUUID
}

func (q *Queries) AssignMovementCard(ctx context.Context, arg AssignMovementCardParams) error {
	_, err := q.db.ExecContext(ctx, assignMovementCard, arg.ID, arg.PlayerID)
	return err
}

const createMovementCard = `-- name: CreateMovementCard :one
INSERT INTO
	movement_cards (
		id,
		description,
		used,
		player_id,
		game_id,
		type,
		position
	)
VALUES
	(
		$1, 
		$2,
		$3,
		$4,
		$5,
		$6,
		$7
	)
RETURNING id, description, used, player_id, game_id, type, position
`

type CreateMovementCardParams struct {
	ID          uuid.UUID
	Description string
	Used        bool
	PlayerID    uuid.NullUUID
	GameID      uuid.UUID
	Type        string
	Position    sql.NullInt32
}

func (q *Queries) CreateMovementCard(ctx context.Context, arg CreateMovementCardParams) (MovementCard, error) {
	row := q.db.QueryRowContext(ctx, createMovementCard,
		arg.ID,
		arg.Description,
		arg.Used,
		arg.PlayerID,
		arg.GameID,
		arg.Type,
		arg.Position,
	)
	var i MovementCard
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.Used,
		&i.PlayerID,
		&i.GameID,
		&i.Type,
		&i.Position,
	)
	return i, err
}

const getMovementCardDeck = `-- name: GetMovementCardDeck :many
SELECT id, description, used, player_id, game_id, type, position
FROM movement_cards
WHERE game_id = $1 AND player_id IS NULL
`

func (q *Queries) GetMovementCardDeck(ctx context.Context, gameID uuid.UUID) ([]MovementCard, error) {
	rows, err := q.db.QueryContext(ctx, getMovementCardDeck, gameID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MovementCard
	for rows.Next() {
		var i MovementCard
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.Used,
			&i.PlayerID,
			&i.GameID,
			&i.Type,
			&i.Position,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
